define BST_TREE_SEARCH (Node, Key):
    if (Node == NULL) or (Node->Key == Key)
        return Node
    if Key < Node->Key
        return BST_TREE_SEARCH (Node->Left, Key)
    return BST_TREE_SEARCH (Node->Right, Key)

define ITERATIVE_BST_TREE_SEARCH (Node, Key):
    while ((Node != NULL) and (Node->Key != Key))
        if (Key < Node->Key)
            Node = Node->left
        else
            Node = Node->right
    return Node

define BST_TREE_INSERT_NODE(Tree, InsertNode)
    y = NULL
    x = Tree->Root
    while (x != NULL)
        y = x
        if (InsertNode->Key < x->Key)
            x = x->left
        else
            x = x->right

    InsertNode->Parent = y

    if (y == NULL) //drzewo jest puste
        Tree->Root = InsertNode
    else
        if (InsertNode->Key < y->key)
            y->Left = InsertNode
        else
            y->Right = InsertNode